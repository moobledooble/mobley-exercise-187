//AUTHOR: Travis Mobley
//COURSE: CPT 187
//PURPOSE: Provides the menus and prompts for the user to interact with.
//STARTDATE: 2.15.2022

package edu.cpt187.mobley.exercise6;

//import java scanner
import java.util.Scanner;


public class MainClass 
{
	//declare and initialize all constants
	public static final char[] MENU_CHARS = {'A','B','Q'};
	public static final String [] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A','B','R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A','B','C','D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args) 
	{
		//instantiation statements
		Order currentOrder = new Order();
		Inventory currentInventory = new Inventory();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//initialize scanner for input
		Scanner input = new Scanner(System.in);

		//declare and initialize all local variables
		String userName = "";
		char menuSelection = ' ';

		displayWelcomeBanner();

		//PRIME read
		menuSelection = validateMenuSelection(input);

		//RUN-WHILE NOT quit loop
		while(menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();

			userName = getUserName(input);

			//if menu is not 'A'
			if(menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);

				if(currentUser.getSearchedIndex() >= 0) 
				{
					displayAccountResults(userName);
				}//END of if searched index > 0

				//else for searched index
				else 
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));

					displayAccountResults();
				}//END of else for searched index

			}//END of if menu is not 'A'

			//else for menu selection IS 'A'
			else 
			{
				currentUser.setSearchedIndex(userName, getPassword(input));

				//if login fail
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//END of if login fail

				//else login GOOD
				else 
				{
					menuSelection = validateFileSelection(input);

					//while not 'R'
					while(menuSelection !='R') 
					{
						//IF 'A'
						if(menuSelection == 'A') 
						{
							currentInventory.setLoadItems(getFileName(input));

							//if file not found
							if(currentInventory.getRecordCount() <= 0) 
							{
								displayFileError();
							}//END of if file not found

							//else file FOUND
							else 
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//END of else file found
						}//END of if 'A'
						//else menu selection not 'A'
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));

							//if item not found
							if(currentInventory.getItemSearchIndex() < 0) 
							{
								displayNotFound();
							}//END of if item not found

							//else item is found
							else 
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());

								currentOrder.setItemID(currentInventory.getItemIDs());

								currentOrder.setItemPrice(currentInventory.getItemPrices());

								currentOrder.setItemName(currentInventory.getItemNames());

								currentOrder.setHowMany(validateHowMany(input, currentOrder.getItemName()));

								//if item out of stock
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany()) 
								{
									displayOutOfStock();
								}//END of if item out of stock

								//else item is in stock
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input,currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									
									currentOrder.setDecreaseInStock(currentInventory);

									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(),
											currentOrder.getHowMany(), currentOrder.getTotalCost());

									//if there is a discount rate
									if (currentOrder.getDiscountRate() > 0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(),
												currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(),
												currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of if there is a discount rate

									//else there is no discount rate
									else 
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),currentOrder.getSubTotal(),
												currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of else there is no discount rate
								}//END of else item in stock
							}//END of else item is found
						}//END of else not 'A'
						menuSelection = validateFileSelection(input);
					}//END of while not 'R'
				}//END of else login GOOD
			}//END of else for menu Selection IS 'A'
			menuSelection = validateMenuSelection(input);
		}//END of run-while NOT quit loop

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		//there is a record count
		if(orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//END of final report
		displayFarewellMessage();

		//closes scanner
		input.close();
	}//END of main method

	//VOID method section

	//void method to display the welcome banner
	public static void displayWelcomeBanner() 
	{
		System.out.println("Welcome to The Specifics General Store Co.");
		System.out.println("\nThis program will allow you to load an inventory,");
		System.out.println("choose an item via item #, amount, discount, and checkout.");
		System.out.println("--- FREE PRIZE AT CHECKOUT! --- LIMITED TIME ONLY... ---");
		System.out.println("**** **** **** **** **** **** **** **** **** **** **** **** ");
	}//END of void method for welcome banner

	//void method to display farewell message 
	public static void displayFarewellMessage() 
	{
		System.out.println("\n**** **** **** **** **** **** **** **** **** **** **** **** ");
		System.out.println("Thank you for choosing The Specifics General Store Co.");
		System.out.println("Where all of your general needs are specifically met!");
	}//END of void method for farewell message

	//void method to display main menu 
	public static void displayMainMenu() 
	{
		//declare and initialize local variables
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");

		//print loop
		while (localIndex < MENU_OPTIONS.length) 
		{
			System.out.printf("%-2s%-4s%-13s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);

			//increment LCV
			localIndex++;
		}//END of print loop

		//prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of void method for main menu

	//void method to display file menu
	public static void displayFileMenu()
	{
		//declare and initialize local variables
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");

		//print loop
		while (localIndex < FILE_MENU_OPTIONS.length) 
		{
			System.out.printf("%-2s%-4s%-13s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);

			//increment LCV
			localIndex++;
		}//END of print loop

		//prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of void method for file menu

	//void method for act results
	public static void displayAccountResults() 
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END of void method for act results

	//OVERLOADED void method for act results
	public static void displayAccountResults(String userName)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END of OVERLOADED void method for act results

	//void method for login error
	public static void displayLoginError()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/ or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END pf void method for login error

	//void method for record report
	public static void displayRecordReport(int borrowedRecordCount) 
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.println("[" + borrowedRecordCount + "] records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	}//END of void method for record report

	//void method for not found error
	public static void displayNotFound() 
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END of void method for not found

	//void method for not open 
	public static void displayFileError() 
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END of void method for not open

	//void method for out of stock error
	public static void displayOutOfStock() 
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END of void method for out of stock

	//void menu to display discount menu 
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{
		int localIndex = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");

		//print loop
		while (localIndex < borrowedDiscountRates.length) 
		{
			System.out.printf("%-2s%-4s%-18s%4.1f%2s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100, "%");

			//increment LCV
			localIndex++;
		}//END of print loop

		//prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please make your selection here: ");
	}//END of void method for discount menu

	//void method to display order report with discount
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, 
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts) 
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-23s%-20s\n\n", "Customer Name:", userName);

		System.out.printf("%-23s%-20s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-23s%-1s%7.2f\n\n", "Item Price:","$", borrowedItemPrice);

		System.out.printf("%-23s%-20s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-26s%2.1f%2s\n", "Discount Rate:", borrowedDiscountRate * 100, "%");
		System.out.printf("%-23s%-1s%7.2f\n","Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-23s%-1s%7.2f\n\n", "Discount Price:", "$", borrowedDiscountPrice);

		System.out.printf("%-25s%3d\n\n", "Quantity:", borrowedHowMany);

		System.out.printf("%-23s%-1s%7.2f\n","Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-27s%2.1f%2s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-23s%-1s%7.2f\n\n","Tax Amount:", "$", borrowedTax);

		System.out.printf("%-23s%-1s%7.2f\n","Order Total:", "$", borrowedTotalCost);

		System.out.printf("\n%-23s%-20s\n\n", "Prize:", borrowedPrizeName);

		System.out.println("Buy more now: Only [" + borrowedInStockCounts + "] left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of void method for order report WITH discount

	//void method to display order report with NO discount
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, 
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts) 
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-23s%-20s\n\n", "Customer Name:", userName);

		System.out.printf("%-23s%-20s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-23s%-1s%7.2f\n\n", "Item Price:","$", borrowedItemPrice);

		System.out.printf("%-25s%3d\n\n", "Quantity:", borrowedHowMany);

		System.out.printf("%-23s%-1s%7.2f\n","Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-27s%2.1f%2s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-23s%-1s%7.2f\n\n","Tax Amount:", "$", borrowedTax);

		System.out.printf("%-23s%-1s%7.2f\n","Order Total:", "$", borrowedTotalCost);

		System.out.printf("\n%-23s%-20s\n\n", "Prize:", borrowedPrizeName);

		System.out.println("Buy more now: Only [" + borrowedInStockCounts + "] left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of void method for order report WITHOUT discount

	//void method to display final report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals,
			int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;


		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-5s%-23s%-15s%-7s%-6s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");

		//print loop
		while (localIndex < borrowedRecordCount) 
		{
			System.out.printf("%-5d%-23s%-3s%5.2f%10d%5s%7.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex],
					borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);

			//increment LCV
			localIndex++;
		}//END of print loop

		System.out.println("\nGRAND TOTAL");
		System.out.printf("%-2s%6.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");

	}//END of Void method for final report

	//VR method section
	//VR method for user name
	public static String getUserName(Scanner borrowedInput) 
	{
		String localUserName="";

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();

		//returns user name
		return localUserName;
	}//END of VR method for user name

	//VR method for password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword ="";

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();

		return localPassword;
	}//END of VR method for password

	//VR method for file name
	public static String getFileName(Scanner borrowedInput) 
	{
		String localFileName = "";

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");

		localFileName = borrowedInput.next();

		return localFileName;
	}//END of VR method for file name

	//VR method for search value
	public static int validateSearchValue(Scanner borrowedInput) 
	{
		int localSearchValue = 0;

		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.nextInt();

		while (localSearchValue <= 0) 
		{
			//error message
			System.out.println("\n~~ERROR: Invalid search, please try again.~~");

			//update read
			System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the search value: ");
			localSearchValue = borrowedInput.nextInt();
		}//END validation loop

		return localSearchValue;
	}//END of VR method for search

	//VR method to validate menu selection
	public static char validateMenuSelection(Scanner borrowedInput) 
	{
		char localMenuSelection = ' ';

		//prime read
		displayMainMenu();
		localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localMenuSelection != MENU_CHARS[0] && localMenuSelection != MENU_CHARS[1] && localMenuSelection != MENU_CHARS[2]) 
		{
			//error message
			System.out.println("\n~~ERROR: Invalid selection, please try again.~~");

			//update read
			displayMainMenu();
			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop

		return localMenuSelection;
	}//END of VR method to validate main menu selection

	//VR method to validate file selection
	public static char validateFileSelection(Scanner borrowedInput) 
	{
		char localFileSelection = ' ';

		//prime read
		displayFileMenu();
		localFileSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localFileSelection != FILE_MENU_CHARS[0] && localFileSelection != FILE_MENU_CHARS[1] && localFileSelection != FILE_MENU_CHARS[2]) 
		{
			//error message
			System.out.println("\n~~ERROR: Invalid selection, please try again.~~");

			//update read
			displayFileMenu();
			localFileSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop

		return localFileSelection;
	}//END of VR method to validate file selection

	//VR method for to validate how many
	public static String validateHowMany(Scanner borrowedInput, String borrowedItemName) 
	{
		int localHowMany = 0;

		//prime read
		System.out.print("\nHow many " + borrowedItemName + "(s) would you like to buy?: ");
		localHowMany = borrowedInput.nextInt();

		//validation loop

		while (localHowMany <= 0) 
		{

			//error message
			System.out.println("\n~~ERROR: Invalid quantity, please try again.~~");

			//update read
			System.out.print("\nPlease enter a quantity: ");
			localHowMany = borrowedInput.nextInt();
		}//END validation loop

		return String.valueOf(localHowMany);	
	}//END of VR method to validate how many

	//VR method to validate discount 
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{
		char localSelection = ' ';

		//prime read
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2] &&
				localSelection != SUB_MENU_CHARS[3]) 
		{

			//error message 
			System.out.println("\n~~ERROR: Invalid selection, please try again.~~");

			//update read
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop

		return localSelection;
	}//END of VR method for discount menu selection

}//END of class MainClass
